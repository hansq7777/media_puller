"""Wrapper around gallery-dl command execution."""
from __future__ import annotations

import logging
import re
import subprocess
from pathlib import Path
from typing import Iterable, List, Optional

from .exceptions import ThirdPartyError, UserInputError

logger = logging.getLogger(__name__)

WINERROR_32 = "WinError 32"


class GalleryDLError(ThirdPartyError):
    """Exception raised when gallery-dl fails to execute."""


def build_command(
    url: str,
    cookies: Optional[str] = None,
    download_archive: Optional[str] = None,
    rate_limit: Optional[str] = None,
    extra_args: Optional[Iterable[str]] = None,
) -> List[str]:
    """Build a gallery-dl command.

    Parameters
    ----------
    url: str
        Target URL to download from.
    cookies: Optional[str]
        Path to cookies file for authentication. ``None`` disables cookie
        usage.
    download_archive: Optional[str]
        File path for gallery-dl's ``--download-archive``. ``None`` to skip.
    rate_limit: Optional[str]
        Value for ``--limit-rate`` (e.g. ``"1M"``) or ``--sleep``
        (e.g. ``"2"`` seconds). Non-numeric values use ``--limit-rate``;
        numeric values are treated as seconds for ``--sleep``.
        ``None`` to omit.
    extra_args: Optional[Iterable[str]]
        Additional arguments for gallery-dl.

    Returns
    -------
    List[str]
        Fully assembled command list ready for execution.

    Raises
    ------
    UserInputError
        If ``url`` is missing.

    Side Effects
    ------------
    Logs the assembled command.
    """
    logger.info("Building gallery-dl command for %s", url)
    if not url:
        logger.error("Missing URL for gallery-dl command")
        raise UserInputError("url is required")

    command = ["gallery-dl", url]
    if cookies:
        command.extend(["--cookies", cookies])
    if download_archive:
        command.extend(["--download-archive", download_archive])
    if rate_limit:
        if rate_limit.replace(".", "", 1).isdigit():
            command.extend(["--sleep", rate_limit])
        else:
            command.extend(["--limit-rate", rate_limit])
    if extra_args:
        command.extend(list(extra_args))
    logger.debug("Built command: %s", command)
    return command


def execute(
    url: str,
    cookies: Optional[str] = None,
    download_archive: Optional[str] = None,
    rate_limit: Optional[str] = None,
    extra_args: Optional[Iterable[str]] = None,
) -> subprocess.CompletedProcess:
    """Build and execute a gallery-dl command.

    Parameters
    ----------
    url: str
        Target URL to download from.
    cookies: Optional[str]
        Path to cookies file for authentication.
    download_archive: Optional[str]
        File path for gallery-dl's ``--download-archive``.
    rate_limit: Optional[str]
        Value for ``--limit-rate`` or ``--sleep`` depending on format.
    extra_args: Optional[Iterable[str]]
        Additional arguments for gallery-dl.

    Returns
    -------
    subprocess.CompletedProcess
        Result from ``subprocess.run``.

    Raises
    ------
    GalleryDLError
        If execution fails or ``gallery-dl`` is missing.

    Side Effects
    ------------
    Invokes a subprocess to run ``gallery-dl``.
    """
    logger.info("Executing gallery-dl for %s", url)
    command = build_command(
        url=url,
        cookies=cookies,
        download_archive=download_archive,
        rate_limit=rate_limit,
        extra_args=extra_args,
    )
    result = run(command)
    logger.info("gallery-dl execution finished")
    return result


def run(command: Iterable[str]) -> subprocess.CompletedProcess:
    """Run ``gallery-dl`` with the provided command list.

    Parameters
    ----------
    command: Iterable[str]
        Command generated by :func:`build_command`.

    Returns
    -------
    subprocess.CompletedProcess
        Result from ``subprocess.run``.

    Raises
    ------
    GalleryDLError
        If the command execution fails or ``gallery-dl`` is missing.
        The stderr output from ``gallery-dl`` is included in the
        exception message and known errors (e.g. ``WinError 32``) are
        translated into friendlier descriptions.

    Side Effects
    ------------
    Removes ``*.part`` files in the target directory, spawns a
    subprocess running ``gallery-dl`` and may retry once if a
    ``WinError 32`` occurs.
    """
    cmd_list = list(command)
    logger.debug("Running command: %s", cmd_list)
    directory = _extract_directory(cmd_list)
    if directory:
        _cleanup_part_files(directory)
    for attempt in range(2):
        try:
            result = subprocess.run(
                cmd_list,
                check=True,
                capture_output=True,
                text=True,
            )
            logger.info("gallery-dl completed successfully")
            return result
        except FileNotFoundError as exc:
            logger.exception("gallery-dl not found")
            raise GalleryDLError("gallery-dl command not found") from exc
        except subprocess.CalledProcessError as exc:
            stderr = exc.stderr or ""
            message = stderr.strip() or "gallery-dl execution failed"
            if WINERROR_32 in stderr:
                message = (
                    "The process cannot access the file because it is being "
                    "used by another process"
                )
                part_file = _extract_part_file(stderr)
                if part_file:
                    try:
                        part_file.unlink()
                        logger.warning("Removed locked partial file: %s", part_file)
                    except OSError as cleanup_exc:
                        logger.warning(
                            "Could not remove partial file %s: %s",
                            part_file,
                            cleanup_exc,
                        )
                if attempt == 0:
                    logger.info("Retrying gallery-dl after WinError 32")
                    continue
            logger.exception("gallery-dl execution failed: %s", stderr)
            raise GalleryDLError(message) from exc
    raise GalleryDLError("gallery-dl execution failed")


def _extract_directory(command: List[str]) -> Optional[Path]:
    """Return the download directory from the command if provided.

    Parameters
    ----------
    command: List[str]
        Command list passed to :func:`run`.

    Returns
    -------
    Optional[Path]
        Path to the download directory or ``None`` if not specified.

    Side Effects
    ------------
    Logs a warning if ``--directory`` is provided without a value.
    """
    if "--directory" in command:
        index = command.index("--directory")
        try:
            return Path(command[index + 1])
        except IndexError:
            logger.warning("--directory provided without a value")
    return None


def _cleanup_part_files(directory: Path) -> None:
    """Remove ``*.part`` files from a directory.

    Parameters
    ----------
    directory: Path
        Directory to scan for partial download files.

    Returns
    -------
    None

    Side Effects
    ------------
    Deletes files from the filesystem and logs the outcome.
    """
    for part in directory.glob("*.part"):
        try:
            part.unlink()
            logger.info("Removed leftover partial file: %s", part)
        except OSError as exc:
            logger.warning("Could not remove partial file %s: %s", part, exc)


def _extract_part_file(stderr: str) -> Optional[Path]:
    """Extract the path of a ``.part`` file from stderr output.

    Parameters
    ----------
    stderr: str
        stderr output from ``gallery-dl``.

    Returns
    -------
    Optional[Path]
        Path to the partial file if found, otherwise ``None``.
    """
    match = re.search(r'["\']([^"\']+\.part)["\']', stderr)
    if match:
        return Path(match.group(1))
    return None
