"""Wrapper around gallery-dl command execution."""
from __future__ import annotations

import logging
import subprocess
from typing import Iterable, List, Optional

from .exceptions import ThirdPartyError, UserInputError

logger = logging.getLogger(__name__)


class GalleryDLError(ThirdPartyError):
    """Exception raised when gallery-dl fails to execute."""


def build_command(
    url: str,
    cookies: Optional[str] = None,
    download_archive: Optional[str] = None,
    rate_limit: Optional[str] = None,
    extra_args: Optional[Iterable[str]] = None,
) -> List[str]:
    """Build a gallery-dl command.

    Parameters
    ----------
    url: str
        Target URL to download from.
    cookies: Optional[str]
        Path to cookies file for authentication. ``None`` disables cookie usage.
    download_archive: Optional[str]
        File path for gallery-dl's ``--download-archive``. ``None`` to skip.
    rate_limit: Optional[str]
        Value for ``--rate-limit`` (e.g. ``"1M"``) or ``--sleep`` (e.g. ``"2"`` seconds).
        ``None`` to omit.
    extra_args: Optional[Iterable[str]]
        Additional arguments for gallery-dl.

    Returns
    -------
    List[str]
        Fully assembled command list ready for execution.

    Raises
    ------
    UserInputError
        If ``url`` is missing.

    Side Effects
    ------------
    Logs the assembled command.
    """
    logger.info("Building gallery-dl command for %s", url)
    if not url:
        logger.error("Missing URL for gallery-dl command")
        raise UserInputError("url is required")

    command = ["gallery-dl", url]
    if cookies:
        command.extend(["--cookies", cookies])
    if download_archive:
        command.extend(["--download-archive", download_archive])
    if rate_limit:
        if rate_limit.replace(".", "", 1).isdigit():
            command.extend(["--sleep", rate_limit])
        else:
            command.extend(["--rate-limit", rate_limit])
    if extra_args:
        command.extend(list(extra_args))
    logger.debug("Built command: %s", command)
    return command


def execute(
    url: str,
    cookies: Optional[str] = None,
    download_archive: Optional[str] = None,
    rate_limit: Optional[str] = None,
    extra_args: Optional[Iterable[str]] = None,
) -> subprocess.CompletedProcess:
    """Build and execute a gallery-dl command.

    Parameters
    ----------
    url: str
        Target URL to download from.
    cookies: Optional[str]
        Path to cookies file for authentication.
    download_archive: Optional[str]
        File path for gallery-dl's ``--download-archive``.
    rate_limit: Optional[str]
        Value for ``--rate-limit`` or ``--sleep`` depending on format.
    extra_args: Optional[Iterable[str]]
        Additional arguments for gallery-dl.

    Returns
    -------
    subprocess.CompletedProcess
        Result from ``subprocess.run``.

    Raises
    ------
    GalleryDLError
        If execution fails or ``gallery-dl`` is missing.

    Side Effects
    ------------
    Invokes a subprocess to run ``gallery-dl``.
    """
    logger.info("Executing gallery-dl for %s", url)
    command = build_command(
        url=url,
        cookies=cookies,
        download_archive=download_archive,
        rate_limit=rate_limit,
        extra_args=extra_args,
    )
    result = run(command)
    logger.info("gallery-dl execution finished")
    return result


def run(command: Iterable[str]) -> subprocess.CompletedProcess:
    """Run ``gallery-dl`` with the provided command list.

    Parameters
    ----------
    command: Iterable[str]
        Command generated by :func:`build_command`.

    Returns
    -------
    subprocess.CompletedProcess
        Result from ``subprocess.run``.

    Raises
    ------
    GalleryDLError
        If the command execution fails or ``gallery-dl`` is missing.

    Side Effects
    ------------
    Spawns a subprocess running ``gallery-dl``.
    """
    logger.debug("Running command: %s", list(command))
    try:
        result = subprocess.run(
            list(command),
            check=True,
            capture_output=True,
            text=True,
        )
        logger.info("gallery-dl completed successfully")
        return result
    except FileNotFoundError as exc:
        logger.exception("gallery-dl not found")
        raise GalleryDLError("gallery-dl command not found") from exc
    except subprocess.CalledProcessError as exc:
        logger.exception("gallery-dl execution failed: %s", exc.stderr)
        raise GalleryDLError("gallery-dl execution failed") from exc
